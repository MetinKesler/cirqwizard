import org.ajoberstar.grgit.*

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:1.6.1"
        classpath "org.ajoberstar:grgit:1.7.2"
    }
}

plugins {
    id "edu.sc.seis.launch4j" version "1.6.1"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: "edu.sc.seis.launch4j"

subprojects {
    apply plugin: 'java'
}

mainClassName = 'org.cirqwizard.fx.MainApplication'

launch4j {
    mainClassName = 'org.cirqwizard.fx.MainApplication'
    icon = '../resources/main/package/windows/cirQWizard.ico'
    outfile = "cirqwizard.exe"
    bundledJrePath = 'jre'
    version = releaseVersion
    textVersion = releaseVersion
    description = 'cirQWizard'
    productName = 'cirQWizard'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://www.sparetimelabs.com/maven2/"
    }
    maven {
        url "http://maven.openimaj.org"
    }
}

def cncPath = file('cnc-java')
if (!cncPath.exists()) {
    Grgit.clone(dir: cncPath, uri: 'https://bitbucket.org/proximus-ondemand/cnc-java.git')
    def gitRepo = Grgit.open(dir: cncPath)
    gitRepo.checkout(branch: 'origin/master', createBranch: false);
}

dependencies {
    compile project(':cnc-java')
    compile('org.bytedeco:javacv:1.3.2')
    if (project.hasProperty('javacpp.platform')) {
        runtime("org.bytedeco.javacpp-presets:opencv:3.2.0-1.3:${project.ext['javacpp.platform']}")
    }
    compile('org.openimaj:core-video-capture:1.3.5')
    compile('org.scream3r:jssc:2.8.0')
    compile('org.simpleframework:simple-xml:2.7.1')
    compile('com.vividsolutions:jts-core:1.14.0')
    testCompile ('junit:junit:4.11')
}

jar {
    baseName = 'cirqwizard'
    version = releaseVersion
}

task updateVersionFile() {
    doLast() {
        def versionFile = new File("src/main/resources/version.number")
        versionFile.text = releaseVersion
    }
}

compileJava.dependsOn updateVersionFile

ant.mainClassName = mainClassName
ant.fallbackClassName = 'com.javafx.main.NoJavaFXFallback'
ant.distDir = libsDir
ant.distName = jar.archiveName;
ant.dependencies = configurations.runtime.asPath
ant.applicationVersion = releaseVersion
ant.applicationClasses = sourceSets.main.output.classesDir
ant.applicationResources = sourceSets.main.output.resourcesDir
ant.importBuild 'fx-package.xml'
def depsDir = new File("build/package/libs")
ant.dependenciesDir = depsDir

jar {
    actions = []

    doLast {
        depsDir.delete()
        depsDir.mkdirs()

        copy() {
            from configurations.runtime
            into 'build/package/libs'
        }

        fx_jar.execute()
    }
}

task assembleNative(dependsOn: 'jar') {
    doLast() {
        fx_bundle.execute()
    }
}

task printNsisVersion() {
    ext.versionFile = new File('build/tmp/version.nsh')
    doLast {
        versionFile.text = '!define VERSION ' + releaseVersion
    }
}

task assembleNsis(type: Exec, dependsOn: ['launch4j', 'printNsisVersion']) {
    commandLine 'C:\\Program files (x86)\\NSIS\\makensis.exe', 'Windows.nsi'
}
